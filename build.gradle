/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

group = 'com.example.elasticagent.template'
version = '0.4-SNAPSHOT'

// these values that go into plugin.xml
// TODO: change these
project.ext.pluginDesc = [
    id         : 'com.example.elasticagent.foocloud',
    version    : project.version,
    goCdVersion: '22.1.0',
    name       : 'Example Elastic Agent Plugin',
    description: 'Some longer description of your plugin goes here',
    vendorName : 'Acme Corp',
    vendorUrl  : 'https://github.com/user/repository'
]

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

// In this section you declare where to find the dependencies of your project
repositories {
  mavenCentral()
}

ext {
  deps = [
    gocdPluginApi: 'cd.go.plugin:go-plugin-api:25.3.0',
    mockito      : 'org.mockito:mockito-core:5.20.0',
  ]

  versions = project.ext.deps.collectEntries { lib, libGav -> [lib, libGav.split(':').last()] }
}

dependencies {
  compileOnly project.deps.gocdPluginApi

  implementation 'com.google.code.gson:gson:2.13.2'
  implementation 'com.google.guava:guava:23.0'
  implementation 'org.apache.commons:commons-lang3:3.19.0'
  implementation 'joda-time:joda-time:2.14.0'

  testImplementation platform('org.junit:junit-bom:6.0.0')
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testImplementation "org.mockito:mockito-core:${project.versions.mockito}"
  testImplementation "org.mockito:mockito-junit-jupiter:${project.versions.mockito}"
  testImplementation 'org.hamcrest:hamcrest:3.0'
  testImplementation "cd.go.plugin:go-plugin-api:${project.versions.gocdPluginApi}"
  testImplementation 'org.skyscreamer:jsonassert:1.5.3'
}

processResources {
  duplicatesStrategy(DuplicatesStrategy.INCLUDE)
  from("src/main/resource-templates") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }
  }

  from("src/main/resources") {
    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }
}

test {
  useJUnitPlatform()
  testLogging {
    showStandardStreams = true

    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.parent) {
        logger.quiet("Running ${suite.name}")
      }
    }

    afterSuite { suite, result ->
      if (suite.parent) {
        logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        if (result.resultType == TestResult.ResultType.FAILURE) {
          logger.quiet("Test ${suite.name} FAILED")
        }
      } else {
        logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
      }
    }
  }
}

jar {
  from(configurations.runtimeClasspath) {
    into "lib/"
  }
}
